0x000:                      | 	.pos 0
                            | 	#TODO
                            |         # Initialize %rsp to stack (an address).
                            | 	#
                            |         # By convention, the first two parameters are passed
                            |         # in %rdi and %rsi.
                            |         # Initialize %rdi to list.
                            |         # Initialize %rsi to mem[count].
                            |         #
                            |         # Call your function and halt after returning from function.
                            | 	# You should see in the final dump that the list is reversed.
                            | 	
0x000: 504f0003000000000000 | 	mrmovq stack, %rsp
0x00a: 507f0802000000000000 | 	mrmovq list, %rdi
0x014: 506f0002000000000000 | 	mrmovq count, %rsi
                            | 	
0x01e: 802800000000000000   | 	call reverse
0x027: 00                   | 	halt
                            | 
0x028:                      | reverse:#reverse(list, count)
                            | 	# %rdi is list: the address of the first element in the list
                            |         # %rsi is count: the number of elements in the list	
                            | 	#TODO
                            | 	# calculate the address of the last number in the list
                            | 	# using %rdi and %rsi and another register to store the result
                            | 	# The expression is: %rdi + 8*%rsi - 8 but you'll need to do
                            | 	# it without a multiply instruction since there isn't one
                            | 	#
                            | 	# Reverse first and last, second and second to last, etc.
                            | 	# Use a loop.
                            | 	# Return when done.
                            | 
0x028: 30f00800000000000000 | 	irmovq $8, %rax
0x032: 2061                 | 	rrmovq %rsi, %rcx
0x034: 6101                 | 	subq %rax, %rcx
                            | 
0x036: 207a                 | 	rrmovq %rdi, %r10
0x038:                      | add_loop:
0x038: 600a                 | 	addq %rax, %r10
0x03a: 6101                 | 	subq %rax, %rcx
0x03c: 743800000000000000   | 	jne add_loop
                            | 
0x045: 20a8                 | 	rrmovq %r10, %r8
                            | 
0x047:                      | reverse_loop:
0x047: 2079                 | 	rrmovq %rdi, %r9
0x049: 208a                 | 	rrmovq %r8, %r10
                            | 
0x04b: 50090000000000000000 | 	mrmovq (%r9), %rax
0x055: 503a0000000000000000 | 	mrmovq (%r10), %rbx
                            | 
0x05f: 40390000000000000000 | 	rmmovq %rbx, (%r9)
0x069: 400a0000000000000000 | 	rmmovq %rax, (%r10)
                            | 
0x073: 30f00800000000000000 | 	irmovq $8, %rax
0x07d: 6007                 | 	addq %rax, %rdi
0x07f: 6108                 | 	subq %rax, %r8
                            | 	
0x081: 6178                 | 	subq %rdi, %r8
0x083: 729500000000000000   | 	jl done
                            | 
0x08c: 704700000000000000   | 	jmp reverse_loop
                            | 
0x095:                      | done:
0x095: 90                   | 	ret	
                            | 
                            | 	# The data
0x200:                      | 	.pos 0x200
0x200: 0b00000000000000     | count:	.quad 11
0x208: 0500000000000000     | list:	.quad 5
0x210: 0600000000000000     | 	.quad 6
0x218: 0700000000000000     | 	.quad 7
0x220: 0800000000000000     | 	.quad 8
0x228: 0900000000000000     | 	.quad 9
0x230: 0a00000000000000     | 	.quad 10
0x238: 0b00000000000000     | 	.quad 11
0x240: 0c00000000000000     | 	.quad 12
0x248: 0d00000000000000     | 	.quad 13
0x250: 0e00000000000000     | 	.quad 14
0x258: 0f00000000000000     | 	.quad 15
0x300:                      | 	.pos 0x300
0x300: 0000000000000000     | stack:  .quad 0
